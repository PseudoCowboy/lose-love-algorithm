package main

import "fmt"

func getConcatenation(nums []int) []int {
	temp := make([]int, len(nums))
	copy(temp, nums)
	nums = append(nums, temp...)
	return nums
}

func main() {
	fmt.Println(countPalindromicSubsequence("xgcatfkejybwdmbyprbfsxlgagsllnmpfpbxoyhjmgnwwxcxcvmpxuupgnfxgdaildyrsmkkxgwsuuescndfjkpynhdfhbvwudtpefxgoacajirynkbfluekmqltzufirxvacnkjwehdfgkhedxkzoytjcffhhylttgsokgozdzagjqmkwqubqxauypjcyyycrlzuewloqkgougmxffgisdyoyyrkvwgcizfvlzihbaxbpkyfkirluyymdinhyttnhacvjdeaxlknscntjjgffduvvlafblejgkcxcmtmvnaldpwfejeynzjitmsamrlvcdtaoahywkobcnbjiyqwlobskanforhpjwicpghqsmeetufikoxfpejscjmtkcqxmjtqkmwjssmpvjnvsntpzldywfrqnovtzxndidchyruxdadwjgpzqunsfdwslyrolzaslkjaqwmrekcqssbuxsuqpsgtlsgsrszcotfbuatwecgbhrcpfodlfhvpikileujulgppwlxjfavhrlfyqenzavqbutskqzxrbbrrgcgfoogzhqplvrrigniodauxlbdwtlytaaggyixpsiwfxovyrvlbpdzbiupqhpvgwbbmxupqwhobqajbcxvmzmfwzoxlduizfkorszfsqdnzsnrfkxnwwfmypjzhrxikalxvelyjexwroagzafdvxqyyviaaxsibuomkwdcxjdaoxzvigjmepggmhqocwspwtliohrjftuafqrnxrymvpcwmlfsdownrnwcfrsrddadytwqhrooooxgjrpywnialjgqylnrvsrqlekkngxegxfzyzhiblsyhsxlbycuhyqiqjfzgwrqxotbvdvnsuvhpxkczydbynwbwhtxqlawittsyjsdwzudgenockxuhwmrngeuihoqtzfmpufjoufnncpjliourdpviukadmojqeihemkdfladhshgqemiimppumbqnwrskxfowzzihcytolrbgqijskgwxlvcncxxgawgjzfezkserildliyrdlvqmvofshqespcujuwbskztnzuadoqaikgxwbpktwlyeuoyvkdtkoxjzbmtowntbwwwdafvczmclmrvwrnzteooedjuhsibiasojcxljxguwmehmqyeqivnodvnqmvyodvoobfomjqqwflojohhaomwcnudgrwspvmsrlrtzxjjnrweneakrqxmmavzpnxllqforsgkgrdaxihbbtwwtqnqklcpsvrwvyqxrrdiynvaqcqqcsqaybipbcsxtismfunkmmebkihjfrvhajlkkciqvnurcsewlypfrtkchkrelgrkrrjwgaaqssmrqxpvjijlchyvogmjearjehlnequnbqhvlbhxqebkaysiluluyebnkmvwbpfsbfruwnydvlxgfcwcgiptllmovcsugchmeugaktbwhblrctwhngkgrocpxlfdnxrppnuvfhdvylxnykiqjlklawwxmqphygyrvifoqfjzzxhzvxjcqrnxemgtespgbxlilkuxgwaczmzuhnelpxleerucpgjjivqfmzybfdmzlcinzmfrlbihocphgsoihqvmhqltuvoqptrcxnzpfmzujowpnzijawcinyjczaijcwrrrtkrjwzmreczanhsfaatzspgnuwkscpqxrlvbcjrrtxlcoaveiixapilcxxarjiraxtlnazqyptddjguqgeueuxrfairxgakbdzxtagqsygmrfpscvvlqouvmvmhfyhqsjunfbbbtrftkckmzaabgsjxucgzrmtvzjxqgvexggrdlwevedxpylqmdptasiwbuopwgauojmvojjxjzyrtlfxfxdohscotfcgvtwqhxqjetprpwmeeujbvejpczasfqdgmhmgjzqdmgapyjfuedrpxmuocycdazjkybibhcposizjsfxcygyexanqtwnkfaruddbvqkyxsswjokomawddmgjbruonegwqatbosxofqfsjdhhuyikjmlvxiicmlyolpebjpyxjlikknymrkshpbeaqlqazlbaynxdfyrnouxyboyzhhqirvgsezedkylqgoudstqvrolndurkiskjhxklmqnisyxxuqmdsxnlyfmnlydkusekngbytfimkbzvyoysmqpxskthqxdixcdrbrcevniwyiuughodbnsyptdabfsbptqutsohhnjwwdbamsbpmhgzcwqgwiehzylzzdrcrlaeiqaaemdearhalaxhzjdtptvdzvsiqkvjgoyhrqiatjktkynfztrmieqbzzzvbsxkjhzgycdytluimwufutoawmsabfvpdbnsemlugwptsilvqhapdaiekjmaowilghbznodoegriklgtzjcmpohtncbkcipttaudaglmwlbygwoubebchspdjjazznpmfnqrxgkazqalfgsxtrfqegfirzmaptiqywqndkkwvlkyumxndwngyfmabsfqlozjiypugmvatowmjanvwqgwocwbzatsfrhoqouikhxbtyhwwlautfumozzjjrgvdrkverbteopgurapgoiuoctsgevhumigqijbyotipswswncbejudrbliaftqwlqhucgdhfzeiinjxilpfmezajbzktjwpgrtgufojpipdzymgsqvnumkxbiqmmfhoxdhonwjoohbaweuyldwfcfewagtgqhwjgrguuchuzltrvkaxfmqjniassybtkgxotfzexukyjrwcvlpnliwhqawkdvxblmpmhopzyfovkaihaztalsmjimpuwoztevpwdvnplalehgikycmgaohmidsudzlhoysdorjhpxadpidtpnqkljvxeqrfydvuediuzhuofonvlidwfjcaocnetubduigwtpkehurkqmmmfiejimgycocwtjowcoaivbismtddbpnukyrwwlbahuovacbwxcjxmuezkjueghzjylzhnxpuuqqpmjyxdhisatdcaezmfkaheggtchqatmfofhamrhlpgiqprfgcoxtxjmtblcjrsmzrynlnkyuswnezrnvthkrhthmjitknzeppsobnqpbxzmscvnvmydpknyovlesmthsiijlfxumxzwnhnfyudzuyqjnriyikalsywyccgxjmbsjghfqogvkctgepkflxyajbvpvvredlyljgdscytmhegonzytemmfxaldyngniyduygvsoemotdmhvnrtoddbrrjovvdshrbqfwkbncccaasmrzmmnjdrsdmgwtbcrzkpnbbxmprmmtgrkvkowzvtohqirhbhqnkwfkztieiexkzygcjihsvzxcdyyonazfiyrkrmmajznvwexgehfqnnmxijukmzenwdebgshyngkjumubsymlexeakcqpfoiesuuzuawfqjgwqrpgozribhzkzndilfptbrmitwaeuioknpfgumllujnwhqhnwtmdplnqdztbaawhjgnpcmlnzitdxecheazctberriqyicycdzsoikeottzrglkpbmajqriffbdqjptnukibgxyklosoisepuemeiuxaukbzgtlihbtpsbwmvnthvpduzggxjikbdyrlhjbsxjxikrqgvgydvogvgwalewvnmfpjpegopgmkvjfnnuluddumnwuelbjfnqaihakppguwbsototizkxlyxdlbgolzpsoaedgcfecpwxtiydqmaaqahlchdjmyfxwkwgbzxcfbmgjezcefdmkdwkyxoruizhvqgixeckdrzhvwvmxynyzdmojbmfjupxpwotamqhlzzmqftfpotwpimabxeboxdvyncwwupzgflrrhdusrdhftcxckuoisycaqywbhbgfpmzkcnolagxpcqdpocadyybiarkkhrizpjmvincqgcfefcppxneejpkhsvevehlxtgcizlxzwyamdgaknxarrjzhlgwyyjykymmmstecdqiihcpabvqfogabeynufhhjfpvqjooyhpakkyiwbmmpszadnyhzdnuitwmvvvrdofmphabbwinxymbysvxphdrvckkrpenoplvghwilxwmdxfcdzkjzpoiidacjijezmmoonabuvfwnwtlnpjbnwgdwdrpcjvleyeskaljdqsnufbxoqddieqtakshismljfdyftvomlgmfpsqdtbnvmayfdpqtugcnytwllrxwzjbckgiochjmtgkopohauxfzfipsflawssvaqsywaedjmgvmbuwckuytcgvfezejhfmxivsiadmicewfngpjeyfqmhyvfltsppsuppcjcqtbwynctvfworjruqfwbqorgdhpacyesnaskvxdqllpfwekqkgwyxltqokaekopvaikzutqhteoxxejvjutpmnvelegqakazpfkvdevhrtfzcmarmfmmqnhgvhybowusmnesrgsbdkhirgfnvayjboedtwsxweeauvnyqxmongcdgtitnhyaoyfdkafyuozyunagfqjibpnkgcrizualpuhjvamycviqwlgjrgbzuzrrzvxqrtzfswktuwgtqexmcxmovkgijqkmoxnetnscmwtcskkyfyymursijschchxsnbhahfqeuubscacdaahieokynsatcqkficmdesjkvemorvywjmdjdcazlhpmwldedvklivrlwscrejjwcejidpftkwocmpwtrmpgqqmzfuunjwmzwogrzohqlgiphcywhkevijkrsayvlaisfidxkimbwnlbxgsemgmvnldkfuwrbimmlgskkhhokrywrlaahftfizcbrmusqaxrtjarsqhjmtdcddfbygybtwomsulhwekaexqtgrnbnqzdadvnldraeojftjieivhngejiukwbihlearhhorlvcnfqigghljhstuihslelogqhnkmlxesmumgdkscerjdjvnaopoacybjwpbrwpasohtgafarlmwbnvewmeirovqtregkthvfqxmeimznawdhfeugcsavfuxqudmeicphkhvkpodjyfbnwsgwskbnfkymvlqbwmcztzkgkybfkhctmcgdsahiuclnsxvqsoupbxwlojryzpypreprdwlvplbzzwgzndhusdqbnaaiavtqymubvswamlgymadzmhkhdrjqglcoogtttifbngllpdmdlgwafeviqlxccbmkyeprzbhynxjpcfwhdbeqfocmsdlznctuuttykrrnpgwldokgxrdnmtvemfcinebhfrctzcozenupgivbrxhgedpjvhdshfpeznqcasaoorstbotkzeyzkgcymnbvfqjmuhixapkljkuobnzscvakhpucwyyeurutkoclmkhdmsiloaqhjetagfsqaeeabcdeggcyrxydwwtjcoxapoykupsfkchbocrdqzoanectgsygridpqrqpkfdalockrmtbdqbvgwhqzvzlziahkuxipyzyoqkvqtffanrjwdmxysjkuneyirasotfwqotkzfqdkbulkuqzknfowuaqosaypgkqatyzbaiowenwenqjulhnketxmncvrkprlwgrjvmmwgytajtekznlkvailesxtmnvhvyszlskxgnmreunxrsdphdjblkjvuzdmujwxgxpnbfbyzfcovcqjrbrsjugfgnbmpmeynrqtrjxmvurwdwrpsncuruxfygrjxzhwojbtlfzyrphtghkilozpvhaqoptogfzanawebvhcdkbsunysmlkvqmuimheiqnwybrkakbdpajnmatbbigytvfhkiqgamruqwdabfqidmkgrgodkdquvrmdivmiqxldssnrnszgqltofzcrjzrqntwgdjrxqilarwmefiyceqsftnfilcalrqsjoyjgtwgahasjvpiryaztpoerdcihvuqseagsmmrizxfoqihpcaufokpjgqmlwheoegsadansixzhfnlnolpnlnbotbjsclvpqfqjrgnekgjntnxuocqvmnlxwynjshcihvzttvabtabidricqnfhhvmunzgxzsbdnssqtenhkcwtvmcofoudmdokljwzthgmhglfdawhsazwhinjowunmxgsxtdzziebpabqsyhbwlgaewjuesrwebjjgnodsynadwlqfpufypnlszrhcwemqrzvvkalshqdalmcyjoeggeqndnlrwjdzwrjduhnpxkshsijibgginqryjtbjuxlvjtahxwfvirztorskemttxuaiprworffianpkcbwllfbvxkwsqyijsoowvjwmxregknqouircuwggkgnoaoactudmhacdjxvgqzuaxnoisqfpuwvnwgchkpkolvpaheolulfaexywewwaobakwcmiixqdmlwlzbuuziiyjltdxrnpymijvcspvfmicodrxearkhkzmbqbzvermixxhmybilrmnoqixemogpzskkiqhgauefdqzxocgegxiojpiirdmfsacnppggnianwaamwszzgndfvqbrefndxvvmvskmbemvulgdmgkpojpfdwwgsneprzkbicozarajicokprvnroiqtxrzcovgqtdwimvyyaysxwjenpmzzwpvbhvkbgzortjubjtptmojqqwarkzpbfqlvftytleablhvofprriumtiresasmruapgrwhnnhwzqfkdmwbqahmttdewbojrprjxmhoundakymkhqpbjgpteqywzobzskxjmmzterfrkklnuhliqfjgnssvidukauaavjsipufxsqxxdvpzpzqrxgzfgpmekzlpylvsqbdnmnbzcmrkjpofqbwimrgzvdyqwynhqdlrevwkhzvtcvkyogjzixywnzrzbecnyowkeiggbwuyeafdkqodxwpeayswyygdfzrbvdfoidgbvdcytkagwrnellaweatmppaugiroaqezlwqlermwxfnsmilbtjgpxwnkfqkyyzfdggtxelbqiuuigrthfwgjxkvearwoplrfsghdajddzjkmnupaljcdsusfuvisazedswwuookjetwvmsmquznexbrfacbboeoeuxfyvnnixcnvlhbcvktwpxxjfmoycreyxtbofdnmsyxigpfgdhxkieggeapatfzyzlblalqggecyxfjnvjvfumbdovxtygeonjrlwowafpqqosrimomoqctlsecswdghdczrftifpwgyasgqgdolattuztxlvcbyuhmzqzpvzorekyffsqopzuvuiunhrrjjswagcipifzffwbsimilgvbvyqdxyuxcjeqhinlkvoxygksdacahiehvykqwtuiyjcbquxwfkdhczmmzgmfcxpqxylbfvzxafotqotpsrlzbowyqsocewerrpcucfqwkhfbeaagaruezneiwqnynxswbhkrkkgvhrycpbtjwqmzixkadasfoewidpsnuscdapwxcrrxsfadkgxsplesbxzyvwaffjnuzohbaujurfsspgriiuzjcgogzvhvsmimsacvpjuhwtzqcdgivkcpvxtqtkjvmdkrajpwhncfgkgblyynqepyuqnzmnsvatqdwocwbvethaeafkimwuojfzwnquubzuviomswtdegstecuohlkeoewshmqardwvyrppqjbgfvqphbgwqqqbzwqybwgyfzuuavffckngprowrqwjskprobdsxgecpujhxprhvklwltijumsjsnlaumsxbsczeunorlbxxgedmtphjkzgrplowpkgcrtypjwhbrjhgiwhxgcxtjoppxqakwzgdocnxvqfjdarongddicrcnfsfsntmsaylddbgiodsvuerpqoopwqutsqnwkexzuotsqlbrjzbuweisyahxetfdkmxnkpgkopyjbwisghlgjhuwqfrydaeaebfoydblnbjlbkdlcdkomzrokagfnyyaolgvnzmrqqczlfzietcxcluemzaevpmlaffjujknyngnzlucjirocbnqclrauozrzzseczcgrzcziqarzxfiyvbwlifqwslcknnfcmebrtdsmhgptkvokybkdvadqjnsfgiafjbenibozrucznvqmuyglyxgcydahjymrgcamaojznctautyuilwzecpnigkszejjodfndnvwnlyewkgcsuziaiwsxiwitikyyubnkvjvmdpvpduhgyteopecygqqyqybkgtbwaebwxewtjzuumdnvnxnxxtkxadibcjxmrufsevhctapddtkaqpedahhxtksvshufabguxycpwtrligseitpdvjjjdbamwiavoeyrhkpeshfhjpiefnjxiaerasmexruwojodnqgkbqzfhadgyycrbcbdygnkhkkkfztdjgoucexpgsuxaioggussgsxvtgdbbkapbjqaeuuciqocgrhygtxknodnbbigqwmbqrqyfnizglcpevyaarozycerraiakssztyqtuvptsbrgagpmurtcfacdlpshimofceplxovoxyfzbmmkpmainddumgukrswmtbutnhkrolgzyjdilsopyitxdcrzpcxfaqxdhlvpqrplylnqoazonykzgtmwqhbxzvbohabcjmqmbfyrnpaegjavqxxayzdvzftgjbjcwtgxmqodckqvzvsgjcrhobkbslgchhtqvfnhlcimnbindqmgbygtblxnestpqmzxtgnqsvfgdlsszjcrfdtedujiovsppvizshoxdvmptuncnowpvwmcndpqnxmkcjjnarqcnbzzkbebflpgilwvpvjhvsdxpitvvgaqugkwxkxiucgbsqaaicuephjsmpmyiiqnhkpcdhvdcydehpomvvgbjzqulkgisaxxxllrlravnouvibeposofscnlghjrquawaihfdpboiaoirmitlgrepxweagkwcfongzochhltzbweitqpeecgrpescnnwyytepwolfxtqvpgdclwdvwlwltlbldlrosmkiqpmdkjmxaadcpisjvrtkneulbdxyxrzqujlgoxghhedeevvyarfdahhqajhhveezxpdbdeufmeawnshymjuqvijpuheumpjpmuxtttgcgantulbdipcotnrgwxvwrpvksrzkkealduizgbkwdthnimprzhthhlrpilbmvhhimhdreepbojzpynbsjvspibnkovmoybsrluonasjmneotpziumxlnlenbiieqpgmpixyrxdhakhvwtmqqtreonknjvikaazumpxmstzvrcnqqcginvkjeysnzjboflvdvxgdathscstnpelgukysoaagsdeiiahsamsyvrlawaaqxgdjynkbpkdeberdqnikmnsmdjdjdlmkablnrfadbrhpjigwtfrzyusnuqhijvolrxqktsqcqrcsgjrflfscoplvwlovhnhvclezflirtihvzuknudgcsiegnwebihamhyxtgeavipesmvqqkvrctjmzhxjxiypinfryafxttkiuvietmmsvanwiozpubisjratheytbmxhcmrjadboifqrwhndqgxuuhwrxnymmeyfumlblfdjxquqxxrtlboiikgtljclaefgfxsjxmxcdyoargmoaieuymadmmeyqsrroxmeunekawftyjhzylefjczyupfdioefzpqgcpzrzjcsirzoueybocslxpibbnvpczdakoafhywzkvlunypsvuljapbfpgpvtrxbgkazxwxpfqseewyubiztmwitcyhacbwmuxdbmgijrhwtlrymjgcqeuihcuiqcqviuitzvzygazdemphjxwbivlkodfudmcjmizcimilacgratvkrrordthhxsfgzbicyuhuppkkdgffdekewqhxsisjlrdpmupkrykfwokliglsnbvpisdbiauujnfxrmxfbmeczhnzzlfuzdoljwlzriecuhscvqgxijvpcmrhcllrtoehseqnkderwwsdfqsknsrmeoopkpuzwpmoqzggdnuwprqjlpsmjhngwijrvdgrlkellyansilkuvbwwhpjkykfxxompalaakksvusrdytvuvmfwiagasobqsvtxkoizpsaeswgapiucmffpplvhvfkyemfbufnuqmwiluvjrkgyrxuptdhcltpydnswioetfyipqipyifmuqrqobpidbgxcotyveoaxulffdjrlptrsnqfmapmfcztqvqmmcoukibdkgcuygcynbhyndikkeoythvdulydqhzjmvnlghckasyvmxqmgeztjabuugfilaxiuugreflktpfhdrpreciopoktlanjgtcnlprqargsjhdlfthnsvpthbohqlksmrircyodtwrvljsmftaermimdgyvoejsmmwodcgzlgsfxqtzabciwhaqygjfgljxfrchyeplytqzvsktodnuoohmwybfxbzicmqazqezanvuvcdtxdttdbkxoweyvssjrkvqqkfiywzatzvjkkifdccrrzvgnrbzwpbbmgpyqyendyadzyfrnwlscgwelclcjkczsfakxxdhsnafzysujqxxrylftdfcpepfefhmraubatljjkjslnbbpwpymfnebhajftqfj"))
}

func countPalindromicSubsequence(s string) int {
	t := make(map[byte]bool)
	for i := range s {
		t[s[i]] = true
	}
	total := len(t)
	if total == 1 {
		return 1
	}
	m := make(map[string]bool)
	used := make(map[byte]bool)
	for i := 0; i < len(s); i++ {
		for j := len(s) - 1; j >= i+2; j-- {
			if len(used) == total {
				return len(m)
			}
			if !used[s[i]] && s[i] == s[j] {
				used[s[i]] = true
				mm := make(map[string]bool)
				for k := range s[i+1 : j] {
					if k > 1 && s[i+1 : j][k] == s[i+1 : j][k-1] {
						continue
					}
					mm[s[i+1 : j][k:k+1]] = true
				}
				for k := range mm {
					m[s[i:i+1]+k+s[j:j+1]] = true
				}
			}
		}
	}

	return len(m)
}
